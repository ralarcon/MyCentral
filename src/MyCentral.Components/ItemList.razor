@using System.Collections.Immutable;

@inherits BlazorObserver<Event>

@{
    var list = _list;
}

<div>
    @if (list.IsEmpty)
    {
        <div class="alert alert-warning">
            Initializing...
        </div>
    }
    else
    {
        @foreach (var (deviceId, events) in list.OrderBy(l => l.Key))
        {
            <div class="card">

                <div class="card-header">
                    @deviceId
                </div>

                <div class="card-body">

                    <h5 class="card-title">Events</h5>

                    <table class="table">
                        <tr>
                            <th scope="col">Time</th>
                            <th scope="col">Body</th>
                        </tr>
                        @foreach (var item in events)
                        {
                            <tr>
                                <td>@item.EnqueuedTime</td>
                                <td>@item.Body</td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
        }
    }
</div>

@code {
    private ImmutableDictionary<string, ImmutableList<Event>> _list = ImmutableDictionary<string, ImmutableList<Event>>.Empty;

    public override void OnNext(Event value)
    {
        ImmutableInterlocked.AddOrUpdate(ref _list, value.DeviceId, key => ImmutableList.Create<Event>(value), (key, existing) => existing.Insert(0, value));
        StateHasChanged();
    }
}
