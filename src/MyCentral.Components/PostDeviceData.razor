@inject IEmulatedDeviceManager EmulatedDevices

@if (_device is not null)
{
    <div class="card">

        <div class="card-header">
            Send property
        </div>

        <div class="card-body">

            @if (_isSending)
            {
                <div class="progress">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
                </div>
            }

            @if (_exceptionMessage is not null)
            {
                <div class="alert alert-danger" role="alert">
                    @_exceptionMessage
                </div>
            }

            @if (_message is not null)
            {
                <div class="alert alert-success" role="alert">
                    Sent event to component <b>@_message.Component</b>
                    <pre><code>@_message.Data</code></pre>
                </div>
            }

            @if (!_isSending)
            {
                <div class="form-group">
                    <label>
                        Component
                        <input class="form-control" @bind-value="@_component" />
                    </label>

                    <label>
                        Data
                        <input class="form-control" @bind-value="@_text" />
                    </label>
                </div>

                <button class="btn btn-primary" @onclick="Send">Send</button>
            }
        </div>
    </div>
}

@code {
    private string? _component;
    private string? _text;
    private IEmulatedDevice? _device;
    private string? _exceptionMessage;
    private InvokeResult? _message;
    private bool _isSending;

    [Parameter]
    public string DeviceId { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        _device = await EmulatedDevices.GetDeviceAsync(DeviceId, default);
    }

    private async Task Send()
    {
        _message = null;
        _exceptionMessage = null;

        if (_device is null || string.IsNullOrEmpty(_component) || string.IsNullOrEmpty(_text))
        {
            return;
        }

        _isSending = true;
        StateHasChanged();

        try
        {
            await _device.SendAsync(_component, _text);
            _message = new(_component, _text);
        }
        catch (Exception e)
        {
            _exceptionMessage = e.Message;
        }

        _isSending = false;
        StateHasChanged();
    }

    private record InvokeResult(string Component, string Data);
}
