@inject IEmulatedDeviceManager EmulatedDevices

@if (_device is not null)
{
    <div class="card">

        <div class="card-header">
            Send property
        </div>

        <div class="card-body">
            <div class="form-group">
                <label>
                    Component
                    <input class="form-control" @bind-value="@_component" />
                </label>

                <label>
                    Data
                    <input class="form-control" @bind-value="@_text" />
                </label>
            </div>

            <button class="btn btn-primary" @onclick="Send">Send</button>
        </div>
    </div>
}

@code {
    private string? _component;
    private string? _text;
    private IEmulatedDevice? _device;

    [Parameter]
    public string DeviceId { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        _device = await EmulatedDevices.GetDeviceAsync(DeviceId, default);
    }

    private async Task Send()
    {
        if (_device is null || string.IsNullOrEmpty(_component) || string.IsNullOrEmpty(_text))
        {
            return;
        }

        await _device.SendAsync(_component, _text);
    }
}
