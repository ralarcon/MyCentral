@using System.Reactive.Linq
@inject IServiceClient Client
@implements IDisposable

@if (_events is not null)
{
    if (_events.Count > 0)
    {
        <table class="table">
            <tr>
                <th scope="col">Time</th>
                <th scope="col">Subject</th>
                <th scope="col">Body</th>
            </tr>

            @foreach (var item in _events)
            {
                <tr>
                    <td>@item.EnqueuedTime</td>
                    <td>@item.Subject</td>
                    <td><pre><code>@item.Body</code></pre></td>
                </tr>
            }

        </table>

        <div class="card-body">
            <a href="javascript:void(0);" class="card-link" @onclick="() => _events?.Clear()">Clear</a>
        </div>
    }
    else
    {
        <div class="alert alert-primary" role="alert">
            No events have been sent.
        </div>
    }
}

@code {
    [Parameter]
    public string? DeviceId { get; set; }

    private ObservableList<Event>? _events;
    private string? _deviceId = String.Empty;

    protected override void OnInitialized()
    {
        InitializeEventList(DeviceId);
    }

    protected override void OnParametersSet()
    {
        if (_deviceId != DeviceId)
        {
            InitializeEventList(DeviceId);
        }
    }

    private void InitializeEventList(string? deviceId)
    {
        _deviceId = deviceId;
        if (!String.IsNullOrWhiteSpace(deviceId))
        {
            _events = new ObservableList<Event>(Client.ObserveEventsFor(deviceId), StateHasChanged);
        }
        else
        {
            _events = new ObservableList<Event>(Client.Events, StateHasChanged);
        }
    }

    public void Dispose()
    {
        _events?.Dispose();
    }
}
