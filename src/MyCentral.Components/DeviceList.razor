@inject IServiceClientFactory ClientFactory
@implements IAsyncDisposable

<input @bind="hostname" />
<input @bind="eventConnectionString" />
<button @onclick="UpdateHost">Update</button>

<p>This component demonstrates fetching data from the server.</p>

@if (hostname is null)
{
    <p><em>Please enter a hostname.</em></p>
}
else if (eventConnectionString is null)
{
    <p><em>Please enter a event connection string.</em></p>
}
else if (client is not null)
{
    <CascadingValue Value="client">
        <SignalRTest />
    </CascadingValue>
}

@code {
private string hostname = "samplenetcat.azure-devices.net";
private string eventConnectionString = "Endpoint=sb://iothub-ns-samplenetc-10876456-04866aa61b.servicebus.windows.net/;SharedAccessKeyName=iothubowner;SharedAccessKey=hdzPWIwfcGEPndWb8CXNRalER7i4eBQQpLQksAaFbzw=;EntityPath=samplenetcat";
private IServiceClient client;

private bool HasHostName => !string.IsNullOrEmpty(hostname);

protected override Task OnInitializedAsync()
    => UpdateHost();

private async Task UpdateHost()
{
    if (string.Equals(hostname, client?.HostName, StringComparison.OrdinalIgnoreCase))
    {
        return;
    }

    if (client is not null)
    {
        await client.DisposeAsync();
        client = null;
    }

    if (string.IsNullOrEmpty(hostname))
    {
        return;
    }

    client = ClientFactory.CreateClient(hostname, eventConnectionString);

    StateHasChanged();
}

public async ValueTask DisposeAsync()
{
    if (client is not null)
    {
        await client.DisposeAsync();
    }
}
}
